{"version":3,"sources":["UI/BreakSessionUI.js","components/Break.jsx","components/Session.jsx","components/TimeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["BreakSessionContainer","children","className","BreakSessionLabel","props","BreakSessionTime","ButtonContainer","PlusMinusButtons","Break","breakLength","decrementBreakLength","incrementBreakLength","breakLengthInMinutes","moment","duration","minutes","id","onClick","Session","sessionLength","decrementSessionLength","incrementSessionLength","sessionLengthInMinutes","asMinutes","TimeLeft","handleResetButtonClick","timerLabel","onStartStopClick","startStopButtonLabel","timeLeft","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","setBreakLength","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setSessionLength","setTimeLeft","useEffect","isStarted","newBreakLength","current","load","clearInterval","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","play","newSessionLength","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.022029ce.chunk.js","sourcesContent":["import React from 'react';\n\nexport const BreakSessionContainer = ({ children, ...props }) => {\n\treturn <div className=\"flex flex-col items-center\">{children}</div>;\n};\n\nexport const BreakSessionLabel = ({ children, ...props }) => {\n\treturn (\n\t\t<p className=\"text-lg text-white\" {...props}>\n\t\t\t{children}\n\t\t</p>\n\t);\n};\n\nexport const BreakSessionTime = ({ children, ...props }) => {\n\treturn (\n\t\t<p className=\"text-4xl font-bold text-white\" {...props}>\n\t\t\t{children}\n\t\t</p>\n\t);\n};\n\nexport const ButtonContainer = ({ children, ...props }) => {\n\treturn (\n\t\t<div className=\"grid grid-flow-col gap-2 rounded\" {...props}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport const PlusMinusButtons = ({ children, ...props }) => {\n\treturn (\n\t\t<button className=\"mt-2 text-lg text-gray-800 px-4 py-2 bg-purple-200 rounded\" {...props}>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n","import React from 'react';\nimport moment from 'moment';\nimport {\n\tBreakSessionContainer,\n\tBreakSessionLabel,\n\tBreakSessionTime,\n\tButtonContainer,\n\tPlusMinusButtons\n} from '../UI/BreakSessionUI';\n\nconst Break = ({ breakLength, decrementBreakLength, incrementBreakLength }) => {\n\tconst breakLengthInMinutes = moment.duration(breakLength, 's').minutes();\n\treturn (\n\t\t<BreakSessionContainer>\n\t\t\t<BreakSessionLabel id=\"break-label\">Break</BreakSessionLabel>\n\t\t\t<BreakSessionTime id=\"break-length\">{breakLengthInMinutes}</BreakSessionTime>\n\t\t\t<ButtonContainer>\n\t\t\t\t<PlusMinusButtons id=\"break-decrement\" onClick={decrementBreakLength}>\n\t\t\t\t\t-\n\t\t\t\t</PlusMinusButtons>\n\t\t\t\t<PlusMinusButtons id=\"break-increment\" onClick={incrementBreakLength}>\n\t\t\t\t\t+\n\t\t\t\t</PlusMinusButtons>\n\t\t\t</ButtonContainer>\n\t\t</BreakSessionContainer>\n\t);\n};\n\nexport default Break;\n","import React from 'react';\nimport moment from 'moment';\nimport {\n\tBreakSessionContainer,\n\tBreakSessionLabel,\n\tBreakSessionTime,\n\tButtonContainer,\n\tPlusMinusButtons\n} from '../UI/BreakSessionUI';\n\nconst Session = ({ sessionLength, decrementSessionLength, incrementSessionLength }) => {\n\tconst sessionLengthInMinutes = moment.duration(sessionLength, 's').asMinutes();\n\treturn (\n\t\t<BreakSessionContainer>\n\t\t\t<BreakSessionLabel id=\"session-label\">Session</BreakSessionLabel>\n\t\t\t<BreakSessionTime id=\"session-length\">{sessionLengthInMinutes}</BreakSessionTime>\n\t\t\t<ButtonContainer>\n\t\t\t\t<PlusMinusButtons id=\"session-decrement\" onClick={decrementSessionLength}>\n\t\t\t\t\t-\n\t\t\t\t</PlusMinusButtons>\n\t\t\t\t<PlusMinusButtons id=\"session-increment\" onClick={incrementSessionLength}>\n\t\t\t\t\t+\n\t\t\t\t</PlusMinusButtons>\n\t\t\t</ButtonContainer>\n\t\t</BreakSessionContainer>\n\t);\n};\n\nexport default Session;\n","import React from 'react';\nimport moment from 'moment';\nimport momentDurationFormat from 'moment-duration-format';\n\nconst TimeLeft = ({ handleResetButtonClick, timerLabel, onStartStopClick, startStopButtonLabel, timeLeft }) => {\n\tconst formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss', { trim: false });\n\treturn (\n\t\t<div className=\"flex flex-col justify-evenly items-center w-64 h-64 bg-white rounded-full\">\n\t\t\t<p className=\"text-2xl font-bold\" id=\"timer-label\">\n\t\t\t\t{timerLabel}\n\t\t\t</p>\n\t\t\t<p className=\"font-clock text-4xl font-bold\" id=\"time-left\">\n\t\t\t\t{formattedTimeLeft}\n\t\t\t</p>\n\t\t\t<button\n\t\t\t\tclassName=\"font-extrabold bg-purple-400 px-4 py-2 rounded-lg\"\n\t\t\t\tid=\"start_stop\"\n\t\t\t\tonClick={onStartStopClick}\n\t\t\t>\n\t\t\t\t{startStopButtonLabel}\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName=\" font-semibold border-2 rounded border-purple-400 border-solid px-2 py-2\"\n\t\t\t\tid=\"reset\"\n\t\t\t\tonClick={handleResetButtonClick}\n\t\t\t>\n\t\t\t\tReset\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default TimeLeft;\n","import React, { Component, useState, useEffect, useRef } from 'react';\nimport Break from './components/Break';\nimport Session from './components/Session';\nimport TimeLeft from './components/TimeLeft';\nimport './assets/main.css';\n\nfunction App() {\n\tconst audioElement = useRef(null);\n\tconst [ breakLength, setBreakLength ] = useState(300);\n\tconst [ currentSessionType, setCurrentSessionType ] = useState('Session');\n\tconst [ intervalId, setIntervalId ] = useState(null);\n\tconst [ sessionLength, setSessionLength ] = useState(1500);\n\tconst [ timeLeft, setTimeLeft ] = useState(sessionLength);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetTimeLeft(sessionLength);\n\t\t},\n\t\t[ sessionLength ]\n\t);\n\n\tconst decrementBreakLength = () => {\n\t\tconst newBreakLength = breakLength - 60;\n\t\tif (newBreakLength > 0) {\n\t\t\tsetBreakLength(newBreakLength);\n\t\t}\n\t};\n\n\tconst incrementBreakLength = () => {\n\t\tconst newBreakLength = breakLength + 60;\n\t\tif (newBreakLength <= 3600) {\n\t\t\tsetBreakLength(breakLength + 60);\n\t\t}\n\t};\n\n\tconst decrementSessionLength = () => {\n\t\tconst newSessionLength = sessionLength - 60;\n\t\tif (newSessionLength > 0) {\n\t\t\tsetSessionLength(newSessionLength);\n\t\t}\n\t};\n\n\tconst incrementSessionLength = () => {\n\t\tconst newSessionLength = sessionLength + 60;\n\t\tif (newSessionLength <= 3600) {\n\t\t\tsetSessionLength(sessionLength + 60);\n\t\t}\n\t};\n\n\tconst isStarted = intervalId != null;\n\tconst onStartStopClick = () => {\n\t\tif (isStarted) {\n\t\t\tclearInterval(intervalId);\n\t\t\tsetIntervalId(null);\n\t\t} else {\n\t\t\tconst newIntervalId = setInterval(() => {\n\t\t\t\tsetTimeLeft((prevTimeLeft) => {\n\t\t\t\t\tconst newTimeLeft = prevTimeLeft - 1;\n\t\t\t\t\tif (newTimeLeft >= 0) {\n\t\t\t\t\t\treturn newTimeLeft;\n\t\t\t\t\t}\n\t\t\t\t\taudioElement.current.play();\n\n\t\t\t\t\tif (currentSessionType === 'Session') {\n\t\t\t\t\t\tsetCurrentSessionType('Break');\n\t\t\t\t\t\treturn breakLength;\n\t\t\t\t\t} else if (currentSessionType === 'Break') {\n\t\t\t\t\t\tsetCurrentSessionType('Session');\n\t\t\t\t\t\treturn sessionLength;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 100);\n\t\t\tsetIntervalId(newIntervalId);\n\t\t}\n\t};\n\n\tconst handleResetButtonClick = () => {\n\t\taudioElement.current.load();\n\t\tclearInterval(intervalId);\n\t\tsetIntervalId(null);\n\t\tsetCurrentSessionType('Session');\n\t\tsetSessionLength(60 * 25);\n\t\tsetBreakLength(300);\n\t\tsetTimeLeft(60 * 25);\n\t};\n\n\treturn (\n\t\t<div className=\"flex flex-col h-screen items-center justify-center bg-purple-500\">\n\t\t\t<div className=\"flex w-full justify-around\">\n\t\t\t\t<Break\n\t\t\t\t\tbreakLength={breakLength}\n\t\t\t\t\tdecrementBreakLength={decrementBreakLength}\n\t\t\t\t\tincrementBreakLength={incrementBreakLength}\n\t\t\t\t/>\n\t\t\t\t<TimeLeft\n\t\t\t\t\thandleResetButtonClick={handleResetButtonClick}\n\t\t\t\t\ttimerLabel={currentSessionType}\n\t\t\t\t\tonStartStopClick={onStartStopClick}\n\t\t\t\t\tstartStopButtonLabel={isStarted ? 'Stop' : 'Start'}\n\t\t\t\t\ttimeLeft={timeLeft}\n\t\t\t\t/>\n\t\t\t\t<Session\n\t\t\t\t\tsessionLength={sessionLength}\n\t\t\t\t\tdecrementSessionLength={decrementSessionLength}\n\t\t\t\t\tincrementSessionLength={incrementSessionLength}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<audio ref={audioElement} id=\"beep\">\n\t\t\t\t<source src=\"https://onlineclock.net/audio/options/default.mp3\" type=\"audio/mpeg\" />\n\t\t\t</audio>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}